#include "aspect_common.ah"
#include <typeinfo>


#include <gtest/gtest.h>
#include <iostream>

// 출력 가능 여부 판별
template<typename T, typename = void>
struct has_insertion : std::false_type {};
template<typename T>
struct has_insertion<T, std::void_t<decltype(std::declval<std::ostream&>() << std::declval<const T&>())>>
    : std::true_type {};

aspect AutoMethodLogger {

    pointcut AllTargetFunctions() = call("% ...::Factorial(...)") || call("% ...::IsPrime(...)") || call("% ...::CloneCString(...)") || call("% ...::Set(...)") || call("% ...::c_string(...)") || call("% ...::Length(...)") || call("% ...::element(...)") || call("% ...::next(...)") || call("% ...::Clear(...)") || call("% ...::Size(...)") || call("% ...::Head(...)") || call("% ...::Last(...)") || call("% ...::Enqueue(...)") || call("% ...::Dequeue(...)") || call("% ...::Map(...)");
    pointcut VoidTargetFunctions() = call("void ...::Factorial(...)") || call("void ...::IsPrime(...)") || call("void ...::CloneCString(...)") || call("void ...::Set(...)") || call("void ...::c_string(...)") || call("void ...::Length(...)") || call("void ...::element(...)") || call("void ...::next(...)") || call("void ...::Clear(...)") || call("void ...::Size(...)") || call("void ...::Head(...)") || call("void ...::Last(...)") || call("void ...::Enqueue(...)") || call("void ...::Dequeue(...)") || call("void ...::Map(...)");
    pointcut NonVoidTargetFunctions() = AllTargetFunctions() && !VoidTargetFunctions();

// 임시로 class 생성자 설정
   advice construction("MyString") : before() {
        AspectLogger::depth()++;
        std::ostringstream oss;
        // 테스트 정보 출력
        const ::testing::TestInfo* const test_info =
            ::testing::UnitTest::GetInstance()->current_test_info();
        if (test_info) {
            oss << "[" << test_info->test_case_name() << "." << test_info->name() << "]";
        }
        oss << AspectLogger::indent(); // depth 출력
        oss << "[CTOR  1] MyString::" << tjp->signature();
        AspectLogger::log(oss.str());
    }
    
    advice construction("MyString") : after() {
        std::ostringstream oss;
        // 테스트 정보 출력
        const ::testing::TestInfo* const test_info =
            ::testing::UnitTest::GetInstance()->current_test_info();
        if (test_info) {
            oss << "[" << test_info->test_case_name() << "." << test_info->name() << "]";
        }
        oss << AspectLogger::indent(); // depth 출력
        oss << "[CTOR  2] MyString::" << tjp->signature();
        AspectLogger::log(oss.str());
        AspectLogger::depth()--;
    }
        
    advice destruction("MyString") : before() {
        AspectLogger::depth()++;
        std::ostringstream oss;
        // 테스트 정보 출력
        const ::testing::TestInfo* const test_info =
            ::testing::UnitTest::GetInstance()->current_test_info();
        if (test_info) {
            oss << "[" << test_info->test_case_name() << "." << test_info->name() << "]";
        }
        oss << AspectLogger::indent(); // depth 출력
        oss << "[DTOR  1] MyString::" << tjp->signature();
        AspectLogger::log(oss.str());
    }

    advice destruction("MyString") : after() {
        std::ostringstream oss;
        // 테스트 정보 출력
        const ::testing::TestInfo* const test_info =
            ::testing::UnitTest::GetInstance()->current_test_info();
        if (test_info) {
            oss << "[" << test_info->test_case_name() << "." << test_info->name() << "]";
        }
        oss << AspectLogger::indent(); // depth 출력
        oss << "[DTOR  2] MyString::" << tjp->signature();
        AspectLogger::log(oss.str());
        AspectLogger::depth()--;
    }




    advice AllTargetFunctions() : before() {
        AspectLogger::depth()++;

        std::ostringstream oss; 
        // 테스트 정보 출력
        const ::testing::TestInfo* const test_info =
            ::testing::UnitTest::GetInstance()->current_test_info();
        if (test_info) {
            oss << "[" << test_info->test_case_name() << "." << test_info->name() << "]";
        }
        oss << AspectLogger::indent(); // depth 출력
        oss << "[CALL   ] (" << tjp->target() << ") " << tjp->signature() << " (";

        // 인자 출력
        constexpr int argc = JoinPoint::ARGS;
        if constexpr (argc > 0) {
            using A0 = JoinPoint::template Arg<0>::Type;
            auto& a0 = *tjp->template arg<0>();
            oss << "arg0=";
            if constexpr (has_insertion<A0>::value) oss << a0;
            else oss << static_cast<const void*>(&a0);
        }
        if constexpr (argc > 1) {
            using A1 = JoinPoint::template Arg<1>::Type;
            auto& a1 = *tjp->template arg<1>();
            oss << ", arg1=";
            if constexpr (has_insertion<A1>::value) oss << a1;
            else oss << static_cast<const void*>(&a1);
        }
        if constexpr (argc > 2) {
            using A2 = JoinPoint::template Arg<2>::Type;
            auto& a2 = *tjp->template arg<2>();
            oss << ", arg2=";
            if constexpr (has_insertion<A2>::value) oss << a2;
            else oss << static_cast<const void*>(&a2);
        }
        oss << ")";

        AspectLogger::log(oss.str());
    }

    advice NonVoidTargetFunctions() : after() {
        std::ostringstream oss;

        // 테스트 정보 출력
        const ::testing::TestInfo* const test_info =
            ::testing::UnitTest::GetInstance()->current_test_info();
        if (test_info) {
            oss << "[" << test_info->test_case_name() << "." << test_info->name() << "]";
        }
        
        oss << AspectLogger::indent(); // depth 출력
        oss << "[RETURN1] (" << tjp->target() << ") " << tjp->signature() << " => " << *tjp->result();
        AspectLogger::log(oss.str());
        AspectLogger::depth()--;
    }

    advice VoidTargetFunctions() : after() {
        std::ostringstream oss;

        // 테스트 정보 출력
        const ::testing::TestInfo* const test_info =
            ::testing::UnitTest::GetInstance()->current_test_info();
        if (test_info) {
            oss << "[" << test_info->test_case_name() << "." << test_info->name() << "]";
        }
        oss << AspectLogger::indent(); // depth 출력
        oss << "[RETURN2] (" << tjp->target() << ") "  << tjp->signature() << " => void";
        AspectLogger::log(oss.str());
        AspectLogger::depth()--;
    }
};
