[TRACE] Registered Parameter: (true, 10)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest::SetUp()
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest::SetUp() => callee: (ptr=0x55915b7dbf40) (anonymous namespace)::HybridPrimeTable::HybridPrimeTable(bool, int) (arg0=1 : bool1, arg1=10 : int10)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest::SetUp() => callee: (ptr=0x55915b7dbf40) (anonymous namespace)::HybridPrimeTable::HybridPrimeTable(bool, int)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest::SetUp()
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody()
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [ASSERTION_CALL] EXPECT_EQ(2, table_->GetNextPrime(0))
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody() => callee: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const (arg0=0 : int0)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const (arg0=0 : int0)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=1 : int1)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 0
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=2 : int2)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 1
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => 2
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody() => callee: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => 2
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [ASSERTION_CALL] EXPECT_EQ(3, table_->GetNextPrime(2))
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody() => callee: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const (arg0=2 : int2)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const (arg0=2 : int2)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=3 : int3)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 1
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => 3
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody() => callee: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => 3
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [ASSERTION_CALL] EXPECT_EQ(5, table_->GetNextPrime(3))
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody() => callee: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const (arg0=3 : int3)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const (arg0=3 : int3)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=4 : int4)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 0
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=5 : int5)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 1
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => 5
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody() => callee: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => 5
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [ASSERTION_CALL] EXPECT_EQ(7, table_->GetNextPrime(5))
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody() => callee: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const (arg0=5 : int5)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const (arg0=5 : int5)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=6 : int6)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 0
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=7 : int7)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 1
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => 7
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody() => callee: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => 7
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [ASSERTION_CALL] EXPECT_EQ(11, table_->GetNextPrime(7))
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody() => callee: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const (arg0=7 : int7)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const (arg0=7 : int7)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=8 : int8)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 0
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=9 : int9)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 0
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=10 : int10)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 0
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=11 : int11)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 1
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => 11
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody() => callee: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => 11
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [ASSERTION_CALL] EXPECT_EQ(131, table_->GetNextPrime(128))
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody() => callee: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const (arg0=128 : int128)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const (arg0=128 : int128)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=129 : int129)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 0
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=130 : int130)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 0
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const (arg0=131 : int131)
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual bool OnTheFlyPrimeTable::IsPrime(int) const => 1
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => callee: (ptr=0x55915b7e0ab0) virtual int OnTheFlyPrimeTable::GetNextPrime(int) const => 131
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody() => callee: (ptr=0x55915b7dbf40) virtual int (anonymous namespace)::HybridPrimeTable::GetNextPrime(int) const => 131
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest_CanGetNextPrime_Test::TestBody()
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest::TearDown()
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [CALL] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest::TearDown() => callee: (ptr=0x55915b7dbf40) virtual (anonymous namespace)::HybridPrimeTable::~HybridPrimeTable()
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest::TearDown() => callee: (ptr=0x55915b7dbf40) virtual (anonymous namespace)::HybridPrimeTable::~HybridPrimeTable() => <destroyed>
[MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3] [RETURN] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7ebfc0) virtual void (anonymous namespace)::PrimeTableTest::TearDown()
[TRACE] Test END: MeaningfulTestParameters/PrimeTableTest.CanGetNextPrime/3
