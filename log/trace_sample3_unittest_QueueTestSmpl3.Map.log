[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7dc440) Queue<int>::Queue() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7dc440) Queue<int>::Queue() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7dc458) Queue<int>::Queue() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7dc458) Queue<int>::Queue() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7dc470) Queue<int>::Queue() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7dc470) Queue<int>::Queue() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7dc430) virtual void (anonymous namespace)::QueueTestSmpl3::SetUp()
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) virtual void (anonymous namespace)::QueueTestSmpl3::SetUp() => callee: (ptr=0x55915b7dc458) void Queue<int>::Enqueue(const int &)  (arg0=1 : int1)
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc458) void Queue<int>::Enqueue(const int &)  => callee: (ptr=0x55915b7e5be0) QueueNode<int>::QueueNode(const int &)  (arg0=1 : int1)
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc458) void Queue<int>::Enqueue(const int &)  => callee: (ptr=0x55915b7e5be0) QueueNode<int>::QueueNode(const int &) 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) virtual void (anonymous namespace)::QueueTestSmpl3::SetUp() => callee: (ptr=0x55915b7dc458) void Queue<int>::Enqueue(const int &) 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) virtual void (anonymous namespace)::QueueTestSmpl3::SetUp() => callee: (ptr=0x55915b7dc470) void Queue<int>::Enqueue(const int &)  (arg0=2 : int2)
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc470) void Queue<int>::Enqueue(const int &)  => callee: (ptr=0x55915b7e3dd0) QueueNode<int>::QueueNode(const int &)  (arg0=2 : int2)
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc470) void Queue<int>::Enqueue(const int &)  => callee: (ptr=0x55915b7e3dd0) QueueNode<int>::QueueNode(const int &) 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) virtual void (anonymous namespace)::QueueTestSmpl3::SetUp() => callee: (ptr=0x55915b7dc470) void Queue<int>::Enqueue(const int &) 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) virtual void (anonymous namespace)::QueueTestSmpl3::SetUp() => callee: (ptr=0x55915b7dc470) void Queue<int>::Enqueue(const int &)  (arg0=3 : int3)
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc470) void Queue<int>::Enqueue(const int &)  => callee: (ptr=0x55915b7e3df0) QueueNode<int>::QueueNode(const int &)  (arg0=3 : int3)
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc470) void Queue<int>::Enqueue(const int &)  => callee: (ptr=0x55915b7e3df0) QueueNode<int>::QueueNode(const int &) 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) virtual void (anonymous namespace)::QueueTestSmpl3::SetUp() => callee: (ptr=0x55915b7dc470) void Queue<int>::Enqueue(const int &) 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7dc430) virtual void (anonymous namespace)::QueueTestSmpl3::SetUp()
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x1005) GoogleTest::OnTestStart => callee: (ptr=0x55915b7dc430) virtual void (anonymous namespace)::QueueTestSmpl3_Map_Test::TestBody()
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) virtual void (anonymous namespace)::QueueTestSmpl3_Map_Test::TestBody() => callee: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) (arg0=0x55915b7dc440 : Queue<int> const*0x55915b7dc440)
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc440) Queue<int> *Queue<int>::Map(int) const  (arg0=1 : int (*)(int)1)
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc440) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5ce0) Queue<int>::Queue() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc440) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5ce0) Queue<int>::Queue() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc440) Queue<int> *Queue<int>::Map(int) const  => 0x55915b7e5ce0
[QueueTestSmpl3.Map] [ASSERTION_CALL] ASSERT_EQ(q->Size(), new_q->Size())
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc440) size_t Queue<int>::Size() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc440) size_t Queue<int>::Size() const  => 0
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5ce0) size_t Queue<int>::Size() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5ce0) size_t Queue<int>::Size() const  => 0
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5ce0) Queue<int>::~Queue() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7e5ce0) Queue<int>::~Queue()  => callee: (ptr=0x55915b7e5ce0) void Queue<int>::Clear() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7e5ce0) Queue<int>::~Queue()  => callee: (ptr=0x55915b7e5ce0) void Queue<int>::Clear() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5ce0) Queue<int>::~Queue()  => <destroyed>
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) (arg0=0x55915b7dc458 : Queue<int> const*0x55915b7dc458)
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc458) Queue<int> *Queue<int>::Map(int) const  (arg0=1 : int (*)(int)1)
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc458) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5ce0) Queue<int>::Queue() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc458) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5ce0) Queue<int>::Queue() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc458) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5be0) const int &QueueNode<int>::element() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc458) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5be0) const int &QueueNode<int>::element() const  => 1
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc458) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0) static int (anonymous namespace)::QueueTestSmpl3::Double(int) (arg0=1 : int1)
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc458) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0) static int (anonymous namespace)::QueueTestSmpl3::Double(int) => 2
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc458) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5ce0) void Queue<int>::Enqueue(const int &)  (arg0=2 : int2)
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7e5ce0) void Queue<int>::Enqueue(const int &)  => callee: (ptr=0x55915b7e3e50) QueueNode<int>::QueueNode(const int &)  (arg0=2 : int2)
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7e5ce0) void Queue<int>::Enqueue(const int &)  => callee: (ptr=0x55915b7e3e50) QueueNode<int>::QueueNode(const int &) 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc458) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5ce0) void Queue<int>::Enqueue(const int &) 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc458) Queue<int> *Queue<int>::Map(int) const  => 0x55915b7e5ce0
[QueueTestSmpl3.Map] [ASSERTION_CALL] ASSERT_EQ(q->Size(), new_q->Size())
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc458) size_t Queue<int>::Size() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc458) size_t Queue<int>::Size() const  => 1
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5ce0) size_t Queue<int>::Size() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5ce0) size_t Queue<int>::Size() const  => 1
[QueueTestSmpl3.Map] [ASSERTION_CALL] EXPECT_EQ(2 * n1->element(), n2->element())
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5be0) const int &QueueNode<int>::element() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5be0) const int &QueueNode<int>::element() const  => 1
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e3e50) const int &QueueNode<int>::element() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e3e50) const int &QueueNode<int>::element() const  => 2
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5ce0) Queue<int>::~Queue() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7e5ce0) Queue<int>::~Queue()  => callee: (ptr=0x55915b7e5ce0) void Queue<int>::Clear() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7e5ce0) void Queue<int>::Clear()  => callee: (ptr=0x55915b7e3e50) QueueNode<int> *QueueNode<int>::next() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7e5ce0) void Queue<int>::Clear()  => callee: (ptr=0x55915b7e3e50) QueueNode<int> *QueueNode<int>::next()  => 0
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7e5ce0) Queue<int>::~Queue()  => callee: (ptr=0x55915b7e5ce0) void Queue<int>::Clear() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5ce0) Queue<int>::~Queue()  => <destroyed>
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) (arg0=0x55915b7dc470 : Queue<int> const*0x55915b7dc470)
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  (arg0=1 : int (*)(int)1)
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5ce0) Queue<int>::Queue() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5ce0) Queue<int>::Queue() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e3dd0) const int &QueueNode<int>::element() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e3dd0) const int &QueueNode<int>::element() const  => 2
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0) static int (anonymous namespace)::QueueTestSmpl3::Double(int) (arg0=2 : int2)
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0) static int (anonymous namespace)::QueueTestSmpl3::Double(int) => 4
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5ce0) void Queue<int>::Enqueue(const int &)  (arg0=4 : int4)
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7e5ce0) void Queue<int>::Enqueue(const int &)  => callee: (ptr=0x55915b7e3e10) QueueNode<int>::QueueNode(const int &)  (arg0=4 : int4)
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7e5ce0) void Queue<int>::Enqueue(const int &)  => callee: (ptr=0x55915b7e3e10) QueueNode<int>::QueueNode(const int &) 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5ce0) void Queue<int>::Enqueue(const int &) 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e3df0) const int &QueueNode<int>::element() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e3df0) const int &QueueNode<int>::element() const  => 3
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0) static int (anonymous namespace)::QueueTestSmpl3::Double(int) (arg0=3 : int3)
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0) static int (anonymous namespace)::QueueTestSmpl3::Double(int) => 6
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5ce0) void Queue<int>::Enqueue(const int &)  (arg0=6 : int6)
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7e5ce0) void Queue<int>::Enqueue(const int &)  => callee: (ptr=0x55915b7e3e50) QueueNode<int>::QueueNode(const int &)  (arg0=6 : int6)
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7e5ce0) void Queue<int>::Enqueue(const int &)  => callee: (ptr=0x55915b7e3e50) QueueNode<int>::QueueNode(const int &) 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => callee: (ptr=0x55915b7e5ce0) void Queue<int>::Enqueue(const int &) 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc470) Queue<int> *Queue<int>::Map(int) const  => 0x55915b7e5ce0
[QueueTestSmpl3.Map] [ASSERTION_CALL] ASSERT_EQ(q->Size(), new_q->Size())
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc470) size_t Queue<int>::Size() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc470) size_t Queue<int>::Size() const  => 2
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5ce0) size_t Queue<int>::Size() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5ce0) size_t Queue<int>::Size() const  => 2
[QueueTestSmpl3.Map] [ASSERTION_CALL] EXPECT_EQ(2 * n1->element(), n2->element())
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e3dd0) const int &QueueNode<int>::element() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e3dd0) const int &QueueNode<int>::element() const  => 2
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e3e10) const int &QueueNode<int>::element() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e3e10) const int &QueueNode<int>::element() const  => 4
[QueueTestSmpl3.Map] [ASSERTION_CALL] EXPECT_EQ(2 * n1->element(), n2->element())
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e3df0) const int &QueueNode<int>::element() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e3df0) const int &QueueNode<int>::element() const  => 3
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e3e50) const int &QueueNode<int>::element() const 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e3e50) const int &QueueNode<int>::element() const  => 6
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5ce0) Queue<int>::~Queue() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7e5ce0) Queue<int>::~Queue()  => callee: (ptr=0x55915b7e5ce0) void Queue<int>::Clear() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7e5ce0) void Queue<int>::Clear()  => callee: (ptr=0x55915b7e3e10) QueueNode<int> *QueueNode<int>::next() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7e5ce0) void Queue<int>::Clear()  => callee: (ptr=0x55915b7e3e10) QueueNode<int> *QueueNode<int>::next()  => 0x55915b7e3e50
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7e5ce0) void Queue<int>::Clear()  => callee: (ptr=0x55915b7e3e50) QueueNode<int> *QueueNode<int>::next() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7e5ce0) void Queue<int>::Clear()  => callee: (ptr=0x55915b7e3e50) QueueNode<int> *QueueNode<int>::next()  => 0
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7e5ce0) Queue<int>::~Queue()  => callee: (ptr=0x55915b7e5ce0) void Queue<int>::Clear() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7e5ce0) Queue<int>::~Queue()  => <destroyed>
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc430) virtual void (anonymous namespace)::QueueTestSmpl3_Map_Test::TestBody()
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc470) Queue<int>::~Queue() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc470) Queue<int>::~Queue()  => callee: (ptr=0x55915b7dc470) void Queue<int>::Clear() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc470) void Queue<int>::Clear()  => callee: (ptr=0x55915b7e3dd0) QueueNode<int> *QueueNode<int>::next() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc470) void Queue<int>::Clear()  => callee: (ptr=0x55915b7e3dd0) QueueNode<int> *QueueNode<int>::next()  => 0x55915b7e3df0
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc470) void Queue<int>::Clear()  => callee: (ptr=0x55915b7e3df0) QueueNode<int> *QueueNode<int>::next() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc470) void Queue<int>::Clear()  => callee: (ptr=0x55915b7e3df0) QueueNode<int> *QueueNode<int>::next()  => 0
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc470) Queue<int>::~Queue()  => callee: (ptr=0x55915b7dc470) void Queue<int>::Clear() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc470) Queue<int>::~Queue()  => <destroyed>
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc458) Queue<int>::~Queue() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc458) Queue<int>::~Queue()  => callee: (ptr=0x55915b7dc458) void Queue<int>::Clear() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc458) void Queue<int>::Clear()  => callee: (ptr=0x55915b7e5be0) QueueNode<int> *QueueNode<int>::next() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc458) void Queue<int>::Clear()  => callee: (ptr=0x55915b7e5be0) QueueNode<int> *QueueNode<int>::next()  => 0
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc458) Queue<int>::~Queue()  => callee: (ptr=0x55915b7dc458) void Queue<int>::Clear() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc458) Queue<int>::~Queue()  => <destroyed>
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc440) Queue<int>::~Queue() 
[QueueTestSmpl3.Map] [CALL] caller: (ptr=0x55915b7dc440) Queue<int>::~Queue()  => callee: (ptr=0x55915b7dc440) void Queue<int>::Clear() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc440) Queue<int>::~Queue()  => callee: (ptr=0x55915b7dc440) void Queue<int>::Clear() 
[QueueTestSmpl3.Map] [RETURN] caller: (ptr=0x55915b7dc430) void (anonymous namespace)::QueueTestSmpl3::MapTester(const Queue<int> *) => callee: (ptr=0x55915b7dc440) Queue<int>::~Queue()  => <destroyed>
[TRACE] Test END: QueueTestSmpl3.Map
