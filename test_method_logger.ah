#include "aspect_common.ah"
#include <typeinfo>


#include <gtest/gtest.h>
#include <iostream>

void print_current_test_name() {
    const ::testing::TestInfo* const test_info =
        ::testing::UnitTest::GetInstance()->current_test_info();
    if (test_info) {
        std::cout << "[TEST INFO] "
                  << test_info->test_case_name() << "." << test_info->name() << std::endl;
    }
}

// 출력 가능 여부 판별
template<typename T, typename = void>
struct has_insertion : std::false_type {};
template<typename T>
struct has_insertion<T, std::void_t<decltype(std::declval<std::ostream&>() << std::declval<const T&>())>>
    : std::true_type {};

aspect AutoMethodLogger {

    pointcut AllTargetFunctions() = call("% ...::TestBody(...)") || call("% ...::Enqueue(...)");
    pointcut VoidTargetFunctions() = call("void ...::TestBody(...)") || call("void ...::Enqueue(...)");
    pointcut NonVoidTargetFunctions() = AllTargetFunctions() && !VoidTargetFunctions();

    advice AllTargetFunctions() : before() {
        print_current_test_name ();
        std::ostringstream oss; 
        oss << "[CALL   ] (" << tjp->target() << ") " << tjp->signature() << " (";
 
        constexpr int argc = JoinPoint::ARGS;

        if constexpr (argc > 0) {
            using A0 = JoinPoint::template Arg<0>::Type;
            auto& a0 = *tjp->template arg<0>();
            oss << "arg0=";
            if constexpr (has_insertion<A0>::value) oss << a0;
            else oss << static_cast<const void*>(&a0);
        }

        if constexpr (argc > 1) {
            using A1 = JoinPoint::template Arg<1>::Type;
            auto& a1 = *tjp->template arg<1>();
            oss << ", arg1=";
            if constexpr (has_insertion<A1>::value) oss << a1;
            else oss << static_cast<const void*>(&a1);
        }

        if constexpr (argc > 2) {
            using A2 = JoinPoint::template Arg<2>::Type;
            auto& a2 = *tjp->template arg<2>();
            oss << ", arg2=";
            if constexpr (has_insertion<A2>::value) oss << a2;
            else oss << static_cast<const void*>(&a2);
        }

        oss << ")";
        AspectLogger::log(oss.str());
    }

    advice NonVoidTargetFunctions() : after() {
        std::ostringstream oss;
        oss << "[RETURN1] (" << tjp->target() << ") " << tjp->signature() << " => " << *tjp->result();
        AspectLogger::log(oss.str());
    }

    advice VoidTargetFunctions() : after() {
        std::ostringstream oss;
        oss << "[RETURN2] (" << tjp->target() << ") "  << tjp->signature() << " => void";
        AspectLogger::log(oss.str());
    }
};
